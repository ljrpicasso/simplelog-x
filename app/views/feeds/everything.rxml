xml.instruct!

xml.rss "version" => "2.0", "xmlns:dc" => "http://purl.org/dc/elements/1.1/" do
  xml.channel do
    
    xml.title(get_pref('SITE_NAME'))
    xml.link(Site.full_url)
    xml.language(get_pref('LANGUAGE'))
    xml.webMaster(get_pref('AUTHOR_EMAIL') + ' (' + get_pref('SITE_PRIMARY_AUTHOR') + ')')
    xml.copyright('Copyright ' + get_pref('COPYRIGHT_YEAR') + (Time.sl_local.year.to_s != get_pref('COPYRIGHT_YEAR') ? '-' + Time.sl_local.year.to_s : ''))
    xml.ttl('60')
    xml.pubDate(CGI.rfc1123_date(Time.sl_localize(@all.first['obj'].date_published))) if @all.any?
    xml.description(get_pref('SLOGAN'))

    for x in @all do
      xml.item do
        xml.title( x['obj'].title )
        xml.link( x['obj'].urls.first )
        xml.pubDate(CGI.rfc1123_date(Time.sl_localize( x['obj'].date_published )))
        xml.guid( x['obj'].urls.first )
        xml.author( x['obj'].authors.kind_of?(String) ? x['obj'].authors : x['obj'].authors.first )
        xml.description( CGI.unescapeHTML( x['obj'].description ) )
        # That's a bit hackish, since only the forum feed contains escaped HTML for some reason.
        # took out categories but could add it back since FeedNormalizer actually supports it.
      end
    end
    
  end
end